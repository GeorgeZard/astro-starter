---
/**
 * ResponsiveToggle component for the mobile navigation menu
 *
 * Renders a toggle button that shows/hides the mobile navigation menu
 * with smooth animations and proper accessibility attributes.
 */
---

<button class="responsive-toggle md:hidden" aria-expanded="false" aria-label="Open menu navigation">
  <svg width="24" height="24" aria-hidden="true" fill="currentColor" class="text-gray-700 hover:text-blue-900" xmlns="http://www.w3.org/2000/svg"
    ><path
      d="M2 1.667h24m-24 8h24m-24 8h24"
      stroke="currentColor"
      stroke-width="2.667"
      stroke-linecap="round"
      stroke-linejoin="round"></path></svg
  >
</button>

<script>
  document.addEventListener('astro:page-load', () => {
    // variables
    const responsiveToggle = document.querySelector('.responsive-toggle') as HTMLButtonElement;
    const body = document.querySelector('body');

    // functions
    const openMenu = (toggle: HTMLButtonElement) => {
      toggle.setAttribute('aria-expanded', 'true');
      toggle.setAttribute('aria-label', 'Close menu navigation');
      toggle.innerHTML = `<svg width="24" height="24" aria-hidden="true" fill="currentColor" class="text-gray-700 hover:text-blue-900" xmlns="http://www.w3.org/2000/svg"><path d="M10 10 2 2m8 8 8 8m-8-8 8-8m-8 8-8 8" stroke="currentColor" stroke-width="2.667" stroke-linecap="round" stroke-linejoin="round"/></svg>`;
      
      // Prevent body scrolling when menu is open
      body?.classList.add('overflow-hidden', 'md:overflow-auto');
    }

    const closeMenu = (toggle: HTMLButtonElement) => {
      toggle.setAttribute('aria-expanded', 'false');
      toggle.setAttribute('aria-label', 'Open menu navigation');
      toggle.innerHTML = `<svg width="24" height="24" aria-hidden="true" fill="currentColor" class="text-gray-700 hover:text-blue-900" xmlns="http://www.w3.org/2000/svg"><path d="M2 1.667h24m-24 8h24m-24 8h24" stroke="currentColor" stroke-width="2.667" stroke-linecap="round" stroke-linejoin="round"/></svg>`;
      
      // Re-enable body scrolling
      body?.classList.remove('overflow-hidden');
    }

    // Handle keyboard navigation - close menu on Escape key
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        const mobileNavigation = document.querySelector('.mobile-menu') as HTMLElement;
        
        if (mobileNavigation?.classList.contains('show') && responsiveToggle) {
          mobileNavigation.classList.remove('show');
          closeMenu(responsiveToggle);
        }
      }
    };

    // execution
    if (responsiveToggle) {
      responsiveToggle.addEventListener('click', (_) => {
        const mobileNavigation = document.querySelector('.mobile-menu') as HTMLElement;
        
        if (mobileNavigation) {
          mobileNavigation.classList.toggle('show');
          mobileNavigation.classList.contains('show') ? openMenu(responsiveToggle) : closeMenu(responsiveToggle);
        }
      });
      
      // Add keyboard event listener for accessibility
      document.addEventListener('keydown', handleKeyDown);
    }
  })
</script>

<style>
  .responsive-toggle {
    padding: 0;
    margin-top: 0;
    border: none;
    background: transparent;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .responsive-toggle svg {
    width: 24px;
    height: 24px;
  }

  .responsive-toggle svg path {
    transition: all 0.2s ease;
  }

  .responsive-toggle:hover svg {
    color: theme('colors.blue.900');
  }

  /* Focus styles for accessibility */
  .responsive-toggle:focus-visible {
    outline: 2px solid theme('colors.blue.600');
    outline-offset: 4px;
    border-radius: 2px;
  }
</style>
