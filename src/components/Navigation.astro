---
import { Icon } from 'astro-icon/components';
import { getEntry } from 'astro:content';

/**
 * Navigation component for the site header
 *
 * Supports two modes:
 * 1. Use with predefined navItems array (direct port of main-theme Navigation.tsx)
 * 2. Use with slot content for dynamic menus when included in Header component
 *
 * When used with a content schema, it will use menu items from the site configuration
 */

// Get props for both approaches
interface Props {
  siteTitle?: string;
  textColor?: string;
  backgroundColor?: string;
  activeItemClass?: string;
  separatorClass?: string;
}

// Attempt to get site configuration
let siteConfig;
try {
  siteConfig = await getEntry('config', 'site');
} catch (error) {
  // Config not available, will use defaults
}

// Define default navigation items if no slots or config provided
interface NavItem {
  name: string;
  href: string;
}

const {
  siteTitle = "BAYAMO",
  textColor = "text-gray-700",
  backgroundColor = "bg-white",
  activeItemClass = "font-bold",
  separatorClass = "text-gray-300"
} = Astro.props;

// Use config main_menu if available, otherwise use default navItems
const navItems: NavItem[] = siteConfig?.data?.main_menu
  ? siteConfig.data.main_menu.map(item => ({
      name: item.label.toUpperCase(),
      href: item.href
    }))
  : [
      { name: 'HOME', href: '#home' },
      { name: 'ABOUT', href: '#about' },
      { name: 'SERVICES', href: '#services' },
      { name: 'GALLERY', href: '#gallery' },
      { name: 'BLOG', href: '/blog' },
      { name: 'CONTACT', href: '#contact' }
    ];

// Determine if this is being used in slot mode (with Header) or standalone
const hasSlotContent = Astro.slots.has('default');

// State for mobile menu (handled in client script)
---

{/* Standalone Navigation (direct port of main-theme component) */}
{!hasSlotContent && (
  <nav class={`fixed top-0 left-0 right-0 ${backgroundColor} z-50 py-6`}>
    <div class="max-w-7xl mx-auto px-6 lg:px-12">
      <div class="flex justify-between items-center">
        <div class="flex items-center">
          <a href="/" class="text-3xl font-light tracking-widest text-gray-900">
            {siteTitle}
          </a>
        </div>
        
        {/* Desktop Navigation */}
        <div class="hidden md:flex items-center">
          {navItems.map((item, index) => (
            <Fragment>
              <a href={item.href} class={`text-sm tracking-widest ${textColor} hover:text-blue-900 transition-colors px-4`} data-nav-link>
                {item.name}
              </a>
              {index < navItems.length - 1 && <span class={`${separatorClass} mx-1`}>|</span>}
            </Fragment>
          ))}
        </div>
        
        {/* Mobile Navigation Button */}
        <div class="md:hidden flex items-center">
          <button id="mobile-menu-toggle" class={`${textColor} hover:text-blue-900`}>
            <svg id="menu-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
            <svg id="close-icon" class="hidden" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
          </button>
        </div>
      </div>
      
      {/* Mobile Navigation Menu (hidden by default) */}
      <div id="mobile-menu" class="md:hidden mt-4 pb-4 hidden">
        <div class="space-y-2">
          {navItems.map(item => (
            <a href={item.href} class={`block py-2 text-sm tracking-widest ${textColor} hover:text-blue-900`} data-mobile-link>
              {item.name}
            </a>
          ))}
        </div>
      </div>
    </div>
  </nav>
)}

{/* Header Component Mode with slot content */}
{hasSlotContent && (
  <div id="main-navigation" class="is-desktop py-8">
    <div class="container">
      <a href="/" class="flex items-center gap-2 !no-underline">
        <span class="font-bold text-xl">{siteTitle}</span>
      </a>
      <div class="wrapper">
        <nav class="desktop-menu" aria-label="Main menu desktop">
          <ul class="menu">
            <slot />
          </ul>
        </nav>
        <button id="menu-toggle" class="hamburger" aria-expanded="false" aria-label="Menu">
          <div class="icon-container flex">
            <div class="icon"></div>
          </div>
        </button>
      </div>
    </div>
    <nav class="mobile-menu" aria-label="Main menu mobile">
      <ul class="menu">
        <slot />
      </ul>
    </nav>
  </div>
)}

<script>
  // Wait for the page to load
  document.addEventListener('astro:page-load', () => {
    // Check which mode we're in
    const isStandaloneMode = !document.getElementById('main-navigation');
    
    if (isStandaloneMode) {
      // Elements for standalone mode
      const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
      const mobileMenu = document.getElementById('mobile-menu');
      const menuIcon = document.getElementById('menu-icon');
      const closeIcon = document.getElementById('close-icon');
      
      // Track menu state
      let isOpen = false;
      
      // Toggle mobile menu
      if (mobileMenuToggle && mobileMenu && menuIcon && closeIcon) {
        mobileMenuToggle.addEventListener('click', () => {
          isOpen = !isOpen;
          
          // Toggle menu visibility
          mobileMenu.classList.toggle('hidden', !isOpen);
          
          // Toggle icons
          menuIcon.classList.toggle('hidden', isOpen);
          closeIcon.classList.toggle('hidden', !isOpen);
        });
        
        // Close menu when clicking on mobile links
        const mobileLinks = document.querySelectorAll('[data-mobile-link]');
        mobileLinks.forEach(link => {
          link.addEventListener('click', () => {
            mobileMenu.classList.add('hidden');
            menuIcon.classList.remove('hidden');
            closeIcon.classList.add('hidden');
            isOpen = false;
          });
        });
      }
    } else {
      // Handle Header component mode
      const menuToggle = document.getElementById('menu-toggle')
      const mainNavigation = document.getElementById('main-navigation')

      if (menuToggle && mainNavigation) {
        menuToggle.addEventListener('click', () => {
          const isOpen = menuToggle.getAttribute('aria-expanded') === 'true'
          menuToggle.setAttribute('aria-expanded', isOpen ? 'false' : 'true')
          mainNavigation.classList.toggle('show', !isOpen)
          document.body.classList.toggle('overflow-hidden', !isOpen)
        })
      }
    }
    
    // Handle active link highlighting (works for both modes)
    const highlightActiveLink = () => {
      const links = document.querySelectorAll('[data-nav-link], .menu a');
      const currentPath = window.location.pathname;
      const currentHash = window.location.hash;
      
      links.forEach(link => {
        const href = link.getAttribute('href') || '';
        
        if (href === currentPath || (href.startsWith('#') && href === currentHash)) {
          link.classList.add('font-bold');
        }
      });
    };
    
    // Add smooth scrolling for hash links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', (e) => {
        const link = e.currentTarget as HTMLAnchorElement;
        const href = link.getAttribute('href') || '';
        
        if (href === '#' || !href.startsWith('#')) return;
        
        e.preventDefault();
        const targetId = href.substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          // Smooth scroll to element
          targetElement.scrollIntoView({
            behavior: 'smooth'
          });
          
          // Update URL hash without jumping
          history.pushState(null, '', href);
          
          // Update active links
          highlightActiveLink();
        }
      });
    });
    
    // Initialize active link highlighting
    highlightActiveLink();
  });
</script>

<style>
  /* Remove default underline from navigation links */
  nav a, .menu a {
    text-decoration: none;
  }
  
  /* Add underline only on hover if desired */
  nav a:hover, .menu a:hover {
    text-decoration: none;
  }

  /* Styles for the Header component mode */
  #main-navigation {
    --color-text-nav: var(--action-color);
    width: 100%;
    z-index: 1000;
  }
  
  #main-navigation > .container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    flex-wrap: wrap;
  }

  #main-navigation.show {
    opacity: 1;
    transform: translateY(0);
  }
  
  .wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .menu {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 1.5rem;
    padding: 0;
    list-style-type: none;
  }
  
  .menu-item {
    position: relative;
    display: flex;
    font-weight: 500;
    color: var(--color-text-nav);
    align-items: center;
  }
  
  /* Support dropdown menus within the navigation */
  .menu-item.has-dropdown button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0;
    margin-top: -1px;
    color: var(--color-text-nav);
    font-size: inherit;
    font-weight: 500;
  }
  
  .dropdown-menu {
    position: absolute;
    visibility: hidden;
    opacity: 0;
    padding: 0.5rem;
    left: 0;
    margin-top: 1.4rem;
    background-color: var(--color-card);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    transition: visibility 0.1s linear, opacity 0.1s linear;
    display: flex;
    flex-direction: column;
    white-space: nowrap;
    z-index: 100;
  }
  
  .menu-item.has-dropdown:hover .dropdown-menu,
  .menu-item.has-dropdown:focus-within .dropdown-menu {
    visibility: visible;
    opacity: 1;
  }
  
  .submenu-item {
    display: block;
    padding: 0.5rem;
    color: var(--color-text-nav);
  }
  
  .submenu-item:hover,
  .submenu-item:focus {
    background-color: rgb(0 0 0 / 10%);
    border-radius: 0.5rem;
  }
  
  /* Mobile menu */
  .hamburger {
    width: 2rem;
    cursor: pointer;
    padding: 0.25rem;
    display: none;
  }
  
  .hamburger .icon-container {
    position: relative;
    width: 1.5rem;
    height: 1.5rem;
  }
  
  .hamburger .icon,
  .hamburger .icon:before,
  .hamburger .icon:after {
    position: absolute;
    border-radius: 0.5rem;
    height: 0.25rem;
    width: 1.5rem;
    background-color: var(--color-text-nav);
    transition: all 0.35s ease;
  }
  
  .hamburger .icon {
    top: 0.625rem;
  }
  
  .hamburger .icon:before,
  .hamburger .icon:after {
    content: '';
  }
  
  .hamburger .icon:before {
    top: -0.5rem;
  }
  
  .hamburger .icon:after {
    top: 0.5rem;
  }
  
  .hamburger[aria-expanded='true'] .icon {
    background-color: transparent;
  }
  
  .hamburger[aria-expanded='true'] .icon:before {
    transform: rotate(45deg);
    top: 0;
  }
  
  .hamburger[aria-expanded='true'] .icon:after {
    transform: rotate(-45deg);
    top: 0;
  }
  
  .mobile-menu {
    display: none;
  }
  
  /* Mobile mode (Header component) */
  @media (max-width: 768px) {
    .desktop-menu {
      display: none;
    }
  
    .hamburger {
      display: block;
    }
  
    #main-navigation.show .mobile-menu {
      display: block;
      margin-top: 1rem;
    }
  
    .mobile-menu {
      width: 100%;
    }
  
    .mobile-menu .menu {
      flex-direction: column;
      margin: 0;
    }
  
    .mobile-menu .menu-item {
      display: block;
      padding: 0.5rem 0;
    }
  
    .mobile-menu .menu-item.has-dropdown button {
      width: 100%;
      justify-content: space-between;
    }
  
    .mobile-menu .dropdown-menu {
      position: static;
      visibility: visible;
      opacity: 1;
      display: none;
      margin-top: 0;
      padding: 0;
      border: none;
    }
  
    .mobile-menu .menu-item.has-dropdown:hover .dropdown-menu,
    .mobile-menu .menu-item.has-dropdown button[aria-expanded='true'] + .dropdown-menu {
      display: block;
    }
  
    .mobile-menu .submenu-item {
      padding: 0.5rem 1rem;
    }
  
    .mobile-menu .submenu-item:hover, .mobile-menu .submenu-item:focus {
      background-color: transparent;
    }
  }
</style>
